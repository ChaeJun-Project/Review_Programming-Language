
실행파일 생성 단계 및 실행파일 실행 과정
===================================================================================================================
실행파일의 생성 단계
1)프로그램 작성
   - 고급언어(C,C++,C# 등)으로 프로그램 작성
   - (.c) 파일

2)전처리기
   - #include, #define과 같이 #으로 시작하는 지시자의 지시에 따라 소스코드를 적절히 변경(여전히 프로그래밍 언어임)
   - (.c) 파일을 (.i) 파일로 변경

3)컴파일러
   - 어셈블리 언어: 기계가 이해하는 것을 기호 형태로 나타낸 언어
   - 소스 코드를 어셈블리 코드로 번역
   - C프로그램을 어셈블리 언어 프로그램(.s)으로 변경

4)어셈블러
   - 어셈블리 코드를 컴퓨터(CPU)가 이해할 수 있는 바이너리 코드(1과0으로 이루어진 기계어)로 번역
   - 어셈블리 언어 프로그램(.s)을 오브젝트 파일(.obj)로 변경

5)링커
   - 오브젝트 파일들과 프로그램 내에서 참조하는 함수나 라이브러리들을 하나로 묶는 작업
   - 실행파일(.exe) 생성. 실행파일에는 컴퓨터에게 일을 시키기위한 명령어(바이너리 코드)가 들어있음


실행파일의 실행 과정
1)로더
   - 실행 프로그램을 메인 메모리에 적재해서 실행할 수 있게 해줌

2)Fetch
   - 메모리상에 존재하는 명령어를 CPU로 가져옴

3)Decode
   - 명령어를 CPU가 해석

4)Execution
   - 해석된 명령어의 명령대로 CPU가 실행(CPU의 ALU에 의해 연산)
===================================================================================================================


용어 정리
===================================================================================================================
빌드
- 사람이 작성한 소스 코드 -> 컴파일 -> 링크 -> 실행파일 실행하는 과정


컴파일
- 사람이 작성한 소스 코드를 기계가 읽을 수 있는 언어로 바꿔주는 단계


링크
- 오브젝트 파일들과 프로그램 내에서 참조하는 함수나 라이브러리들을 하나로 묶는 단계
  

디버깅
- 프로그래밍 과정에서 오타에 의한 오류나 실행 과정에서 예상치 못한 예외가 발생하는 오류들을 잡아가는 단계


빌드 모드
- 디버그(Debug) 모드(개발 중에 디버깅에 적합한 빌드 모드)
   - 코드 최적화를 하지 않음
   - 바이너리(실행 파일) 크기가 큼
   - 코드 실행 속도가 느림
   - 메모리 사용량이 많음
   - 바이너리에 디버깅에 필요한 정보가 포함
   - 컴파일 속도가 빠름

- 릴리즈(Release) 모드(개발 완료 후 배포에 적합한 빌드 모드)
   - 코드 최적화 과정 수행
   - 바이너리(실행 파일) 크기가 작음
   - 코드 실행 속도가 빠름
   - 메모리 사용량이 적음
   - 디버깅에 필요한 정보가 거의 포함되지 않음
   - 컴파일 속도가 느림(최적화 과정이 포함되므로)
===================================================================================================================