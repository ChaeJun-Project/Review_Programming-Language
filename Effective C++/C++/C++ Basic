
//C++
===================================================================================================================
C++
- C++은 기존의 C언어에 여러 가지 기능(대표적으로 클래스, 템플릿)을 추가하여 만든 프로그래밍 언어

- 기존에 C언어로 작성된 프로그램을 그대로 사용할 수 있도록 C언어의 문법적 체계를 그대로 계승 


C++언어의 특징
- 다른 언어에 비해 상대적으로 속도가 가장 빠름(가상 머신을 거치지 않고 OS에서 바로 실행)
   - C#으로 만들어진 프로그램은 OS가 실행하려면 .NetFramework(가상 머신)를 거쳐서 실행해야 하기 때문
   - .NetFramework과 같은 가상 머신은 메모리 관리 기능을 제공. 
   - But, C++은 가상 머신의 기능을 제공 받지 않아 개발자가 직접 기능을 구현해야 함
   - 이는 구현이 힘들다는 단점이 있지만 반대로 얘기하면 개발자의 능력에 따라 메모리를 더 효율적으로 관리할 수 있음

- 절차 지향적 특징도 있지만 객체 지향적 특징이 중요한 언어임(순서보다는 객체 간의 상호작용이 중요)

- 구현 난이도와 양이 많기 때문에 개발속도는 느린 편 


C++에서 추가한 기능
- 함수 오버로딩
   - 매개 변수의 개수나 타입이 다른 동일한 이름의 함수들을 중복 선언 가능
   - 함수의 반환 타입은 함수 오버로딩에서 고려되지 않음
   - 함수는 인수에만 기반하여 호출되기 때문

- 디폴트 매개 변수
   - 매개 변수에 값이 전달되지 않는 경우 디폴트 값이 전달되도록 함수를 선언할 수 있음
   - 선언 시 '매개 변수 = 특정 값'으로 작성

- 참초
   - 변수에 별명을 붙여 변수 공간을 같이 사용할 수 있는 참조의 개념 도입

- 참조에 의한 호출(call by reference)
   - 함수 호출 시 참조를 전달할 수 있게 함

- new와 delete 연산자
   - 동적 메모리 할당/해제를 위한 new/delete 연산자 도입

- 연산자 재정의
   - 기존의 연산자에 새로운 연산을 정의함(연산자 오버로딩)

- 제네릭 함수(템플릿)와 클래스
   - 함수나 클래스를 데이터 타입에 의존하지 않고 일반화시킬 수 있게 함


객체지향
- 
===================================================================================================================

