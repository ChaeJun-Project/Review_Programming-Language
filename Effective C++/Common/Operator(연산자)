
연산자(Operator)
===================================================================================================================
대입 연산자
- '='


산술 연산자
- '+, -, *, /, %(모듈러스, 실수끼리 혹은 실수가 포함되는 연산에는 수행 불가. 나머지를 측정할 수 없음)'

- '++, --'
   - 변수 앞에 붙으면 전위연산자(증가시키고 값을 사용), 뒤에 붙으면 후위연산자(값을 사용하고 증가)
      ex) int data = 0, a = 10; 
	      data = ++a(전위) => 자기 자신을 먼저 증가하고 다음 연산을 진행(객체로 반환)
		                   => 진행단계에서는 data에 저장된 값은 a가 1증가한 11이 저장됨
						   => a의 값도 11로 증가

		  data = a++(후위) => 모든 연산이 끝나고 마지막에 증가(연산 결과값(상수(const))을 반환)
		                   => 진행단계에서는 data에 저장된 값은 10이 저장되고 다음 줄로 넘어갈 때 1이 증가
						   => a의 값도 11로 증가
						   
   - 일반적으로 전위연산자가 후위연산자보다 속도가 빠름
      - 후위연산이 이루어지기 전의 값을 저장하기 위한 임시객체(변수)를 만들어 메모리를 사용하기 때문
	  - 임시객체(변수)에 값을 저장할 때 복사생성자나 연산자 오버로딩(=) 함수가 호출될 수 있기 때문

- 보통은 대입 연산자보다 산술 연산자의 우선순위가 높음


논리 연산자
- '!(reverse), &&(and), ||(or)'

- 0이 아닌 모든 값은 참임(주로 1)

- true(=1), false(=0)


비교 연산자
- '==(같은지), !=(다른지), <, >, <=, >='

- 논리 연산자보다 비교 연산자가 우선순위가 높음


비트 연산자
- 쉬프트'<<(비트를 오른쪽으로 밈), >>(비트를 왼쪽으로 밈)'
   ex) unsigned char byte = 1;  
       byte = byte << 1; =>  byte <<= 1 => 오른쪽으로 한 칸 밈 byte = 2(2^1)가 됨
	   byte = byte << 3; =>  byte <<= 3 => 오른쪽으로 세 칸 밈 byte = 8(2^3)이 됨

	   unsigned char byte = 13;  
	   byte = byte >> 1; =>  byte >>= 1 => 왼쪽으로 한 칸 밈 byte = (13 / 2^1 = 6)가 됨

- '&(비트 곱), |(비트 합), ^(xor, 같으면 0 다르면 1), ~(반전)'
   - 비트의 자릿수 단위로 각각 연산

   - &(비트 곱)
      - 둘다 1인 경우 1, 하나라도 다르면 0

   - |(비트 합)
      - 둘 중 하나라도 1이면 1 둘 다 0이면 0

   - ^(xor)
      - 두 개가 같으면 0 다르면 1

   - ~(반전)
      - 1은 0으로 0은 1로 반전

- 비트는 게임 프로그래밍에서 상태를 저장할 때 사용
   - 각 자릿수에 1값을 넣어 표현
      ex) 목마름 1, 배고픔 2, 기분 좋음 4
	      unsigned char iStatus = 0;
		  
		  [상태 추가]
		  iStatus |= 목마름;		 =>0000 0001
		  iStatus |= 배고픔;		 =>0000 0011
		  iStatus |= 기분 좋음;   =>0000 0111

		  iStatus => 0000 0111

          [상태값 체크]
		  if(iStatus & 목마름) => 비트 자릿수 값을 비교해서 둘 다 1이면 true 아니면 false 반환

		  [상태 제거]
		  iStatus &= ~목마름;  
		     0000 0111 => iStatus
		   & 1111 1110 => ~목마름
		     0000 0110 => 목마름이 빠진 상태
===================================================================================================================