
자료형(Data Type)
===================================================================================================================
자료형
- 크기 단위(byte)

- 다양한 범위의 자료형 '안전을 보증'하며 프로그램을 실행하지 않고도 결정할 수 있는 프로그램의 특성

- 같은 비트여도 자료형의 표현에 따라 컴퓨터는 다른 숫자로 인식함
   ex) unsigned char c = 255
       char c1 = 255
	   c와 c1은 1111 1111 로 서로 같은 비트값을 가지지만,
	   컴퓨터는 c에 저장된 값을 255로 c1에 저장된 값은 -1(1이랑 더했을 때 0이 되는 값)로 인식함 


자료형의 종류(signed)
- 정수형 데이터 표현 방식과 실수형 데이터 표현 방식은 다르기 때문에 구분함

- 정수는 정수끼리, 실수는 실수끼리 연산하되, 두 표현방식의 피 연산자가 연산될 경우 명시적으로 변환하는 것이 좋음
   ex) int a = 10 + static_cast<int>(10.1234f);

- 정수형
   - char(1byte, 8bit)		 => 2^8가지의 숫자 표현 가능(-2^7 ~ 2^7-1)

   - short(2btye, 16bit)	 => 2^16가지의 숫자 표현 가능(-2^15 ~ 2^15-1)

   - int(4byte, 32bit)		 => 2^32가지의 숫자 표현 가능(-2^32 ~ 2^32-1)

   - long(4byte, 32bit)		 => 2^32가지의 숫자 표현 가능(-2^32 ~ 2^32-1)

   - long long(8byte, 64bit) => 2^64가지의 숫자 표현 가능(-2^64 ~ 2^64-1)

   - 음수 표현 방식이 양수보다 많은 이유는 -0의 표기 때문

- 실수형(부동소수점 표현 방식)
   - 지수 표기법
      - 실수e+지수: 실수 * 10의 거듭제곱. 2.1e+3이라면 2.1 * 1000 = 2100
	  - 실수e-지수: 실수 * (1 / 10의 거듭제곱). 2.1e-2라면 2.1 * (1/100) = 0.021

   - float(4byte, 32bit)  => 1.175494e-38 ~ 3.402823e+38(유효 자릿수: 7, 부호(1bit), 지수(8bit), 가수(23bit))

   - double(8byte, 64bit) => 2.225074e-308 ~ 1.797693e+308(유효 자릿수: 16, 부호(1bit), 지수(11bit), 가수(52bit))

   - 실수 표현방식은 정밀도에 의존
      - 따라서 double 자료형이 float보다 더 많은 메모리를 사용하므로 더 많은 아래의 소수점까지 정확하게 표현이 가능

   - 실수의 맨 마지막에 f를 붙여주면 그 실수는 float 데이터 타입으로 인식
      ex) 4.f(float) 4.0(double)


양수(0 포함)만 취급하는 자료형(unsigned)
- 자료형 앞에 'unsigned'를 붙여주면 양수(0 포함)만 취급하는 자료형이 됨

- 맨 왼쪽의 비트를 부호 비트로 사용하지 않음. 따라서 기존의 signed 자료형보다 표현할 수 있는 양수의 범위가 더 넓음

- 저장할 수 있는 숫자의 범위가 0부터 시작함

- 최대로 저장할 수 있는 숫자보다 큰 숫자를 넣는 경우 unsigned 자료형의 변수에 저장된 값은 0이 됨(최대로 저장할 수 있는 비트가 넘어가기 때문)


보수
- 두 수의 합이 진법의 밑수가 되게 하는 수
   ex) 10진수 4의 10의 보수는 6

- 컴퓨터 내부에서는 사칙연산을 할 때 덧셈을 담당하는 가산기만 이용하기 때문에 뺄셈을 변환하여 계산
   ex) 3 - 1 => 3 + (-1) 로 변환하여 계산

- 1의 보수 구하는 법
   - 각 자릿수의 값이 모두 1인 수에서 주어진 2진수를 빼면 1의 보수를 얻을 수 있음
   - 또는 각 자릿수의 비트값을 모두 반전시키면 됨(0 -> 1, 1 -> 0)
      ex) 0000 0100(2)의 1의 보수는
	      
		  1111 1111(2)
	    - 0000 0100(2)
		= 1111 1011(2) : 0000 0100(2)의 1의 보수
    
- 2의 보수 구하는 법(음의 정수 찾기)
   - 1의 보수에 1을 더한 값
       ex) 1111 1011(2) : 0000 0100(2)의 1의 보수

	      1111 1011(2)
	    + 0000 0001(2)
		= 1111 1100(2) : 0000 0100(2)의 2의 보수

	  [확인]
	      0000 0100(2)
	    + 1111 1100(2)
		= 0000 0000(2) = 0
===================================================================================================================