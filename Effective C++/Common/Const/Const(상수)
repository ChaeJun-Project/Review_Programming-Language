
//Const(상수)
===================================================================================================================
const
- 변수 선언 시 'const' 키워드를 붙이면 해당 변수는 상수화가 됨


const 의 종류
- 변수 선언 시 자료형 앞에 붙는 const
   ex) const int a; => 변수 a의 메모리 주소에 저장된 값 변경 불가

- 포인터 변수 선언 시 자료형 앞 또는 뒤에 붙는 const
   ex) const int* pInt; or int const* pInt; => 포인터 변수 pInt가 가리키는 메모리 주소에 저장된 값 변경 불가

- 포인터 변수 선언 시 포인터 변수 앞에 붙는 const
   ex) int* const pInt; => 포인터 변수 pInt가 가리키는 메모리 주소 변경 불가
                           But, 포인터 변수 pInt가 가리키는 메모리 주소에 저장된 값은 변경 가능

- 포인터 변수 선언 시 자료형 앞과 포인터 변수 앞에 붙는 const
   ex) const int* const pInt; => 포인터 변수 pInt가 가리키는 메모리 주소 변경 불가
                                 포인터 변수 pInt가 가리키는 메모리 주소에 저장된 값 변경 불가

- 함수를 선언 및 정의할 때 매개변수에 붙는 const
   ex) int a = 10; 
       void PrintInt(const int* a); or void PrintInt(const int& a);
	   => PrintInt(&a) or PrintInt(a)를 호출 할 때 
	      함수 PrintInt 내부에서 변수 a의 메모리 주소에 저장된 값이 변경되지 못하도록 막음


상수화
- 값이 변경될 수 없는 상태로 변경되는 것(c/c++ 컴파일러가 불가능하다고 막기 떄문)
   - 상수화가 된 변수의 수정은 c/c++ 컴파일러가 문법적으로 막기 때문에 불가능 하지만 상수 변수를 포인터로 접근하면 수정이 가능
      - 현재 컴파일러는 최적화가 되어있기 때문에 포인터로 접근해도 출력은 변경되지 않음(cpu가 레지스터에 저장된 값을 사용하기 때문)
      - But, 실제로 상수화가 된 변수의 내부 값(해당 변수의 메모리 주소에 저장된 값)은 변경됨

- r-value
===================================================================================================================

