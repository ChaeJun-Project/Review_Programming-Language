
//포인터(Pointer)
===================================================================================================================
포인터 타입
- 자료형 뒤에 '*'를 붙여 포인터 변수 선언

- 포인터 변수를 '*'를 이용해서 역참조할 때 해당 포인터가 가리키는 주소에 저장된 데이터의 값을 어떻게 해석할지 결정
   ex) int a = 10; 
	   int *p = &a; => 변수 a의 주소 저장, *p는 변수 a의 메모리에 저장되어 있는 10을 가지고 있음
	                => 변수 a의 주소에 저장된 데이터의 값을 int로 해석(4Byte 정수 표현 방식)

- 주소를 저장하기 때문에 포인터 변수의 크기는 어느 자료형이던 다 동일
   - x86(32비트 환경, 4Byte)
   - x64(64비트 환경, 8Byte)

- 포인터 변수 + 1은 다음 주소의 시작 번지를 가리킴(포인터 변수의 자료형에 따라 증감 단위는 sizeof(포인터가 가리키는 변수의 자료형))
    ex) int a = 10; => 변수 a의 주소값을 100이라고 가정
	   int *p = &a; => p + 1은 다음 주소의 시작 번지 100 + 4(sizeof(int)) = 104의 주소를 가리킴 


주소
- 주소의 단위는 Byte, 표현 방식은 정수 표현 방식
- 선언한 변수 앞에 &를 붙이면 해당 변수의 주소 값을 알 수 있음


void 포인터
- 'void*'

- 어떠한 자료형 타입의 주소를 다 가리킬 수 있으나 역참조(*) 및 주소 연산 불가
   - 해당 포인터가 가리키는 주소에 저장된 데이터의 값을 어떻게 해석할지 결정하지 않았기 때문

   - 그래서 역참조(*) 및 주소 연산 불가
===================================================================================================================