
//실행파일 생성 단계 및 실행파일 실행 과정
===================================================================================================================
실행파일의 생성 단계
1)프로그램 작성
   - 고급언어(C,C++,C# 등)으로 프로그램 작성
   - (.c) 파일

2)전처리기
   - #include, #define과 같이 #으로 시작하는 지시자의 지시에 따라 소스코드를 적절히 변경(여전히 프로그래밍 언어임)
   - (.c) 파일을 (.i) 파일로 변경

3)컴파일러
   - 어셈블리 언어: 기계가 이해하는 것을 기호 형태로 나타낸 언어
   - 소스 코드를 어셈블리 코드로 번역
   - C프로그램을 어셈블리 언어 프로그램(.s)으로 변경

4)어셈블러
   - 어셈블리 코드를 컴퓨터(CPU)가 이해할 수 있는 바이너리 코드(1과0으로 이루어진 기계어)로 번역
   - 어셈블리 언어 프로그램(.s)을 오브젝트 파일(.obj)로 변경

5)링커
   - 오브젝트 파일들과 프로그램 내에서 참조하는 함수나 라이브러리들을 하나로 묶는 작업
   - 실행파일(.exe) 생성. 실행파일에는 컴퓨터에게 일을 시키기위한 명령어(바이너리 코드)가 들어있음


실행파일의 실행 과정
1)로더
   - 실행 프로그램을 메인 메모리에 적재해서 실행할 수 있게 해줌
2)Fetch
   - 메모리상에 존재하는 명령어를 CPU로 가져옴
3)Decode
   - 명령어를 CPU가 해석
4)Execution
   - 해석된 명령어의 명령대로 CPU가 실행(CPU의 ALU에 의해 연산)
===================================================================================================================

//라이브러리
===================================================================================================================
라이브러리
- 다른 프로그램들과 링크되기 위하여 존재하는 하나 이상의 서브루틴이나 함수들의 집합

라이브러리 사용이유
- 코드의 재사용
- 코드의 부품화 실현
- 소스를 제공하지 않아 기술 유출 방지
- 사용자의 개발시간 단축
===================================================================================================================

선언: 코드에 사용되는 '어떤 대상'의 이름과 타입을 컴파일러에게 알려주는 것
 - 객체 선언
 - 함수 선언
 - 클래스 선언
 - 템플릿 선언