
함수(Function)
===================================================================================================================
모듈화
- 하나의 기능을 명확하게 구분하고 쪼개는 작업


재귀함수(Recursion Function)
- 함수 내부에서 자기 자신의 함수를 호출하는 함수
- 분기문 return으로 함수 스택 종료

- 장점
   - 계층 구조를 표현하는데 용이

- 단점
   - 스택 오버플로우가 발생할 수 있음
   - 성능저하를 일으킬 수 있음


인라인 함수(Inline Function)


함수 오버로딩
- 2개 이상의 같은 이름을 가진 함수를 정의할 수 있는 기능

- 함수의 이름이 같지만 서로 다른 기능을 수행하는 함수를 정의할 수 있는 기능


함수 오버로딩의 조건
- 함수의 매개변수의 개수나 매개변수의 자료형 타입이 다르면 함수 오버로딩 가능


함수 포인터
- 매개 변수로 함수 자체를 넘기고 싶을 때 사용(콜백함수 등)
   ex) void (*pFunc)(int, int) => 순서대로 반환형, 함수 포인터 변수, 파라미터

- 함수 포인터는 동일한 반환형, 매개 변수를 가지는 함수의 주소를 값으로 가짐
   ex) int a = 10, b = 20;
	   void test(int a, int b);
       void (*pFunc)(int, int);
	   pFunc = test; => c에서는 pFunc = test; or pFunc = &test; 둘 다 가능
	                 => But, C++에서 클래스의 멤버 함수는 함수의 주소를 포인터에 대입할 때 '&'를 붙여줘야 함
					    ex) 반환형 (클래스::*함수 포인터)(파라미터) = &클래스::멤버함수
	   pFunc(a, b); => test 함수 호출

- 매개 변수로 넘기기 위해서는 함수 포인터의 원형과 동일하게 적어줘야 함
   ex) void (*pFunc)(int, int)의 함수 포인터를 매개 변수로 넘기고 싶다면
       선언: void Receive(void (*pFunc)(int, int));
	   호출: Receive(pFunc);


콜백함수
-

===================================================================================================================


//함수 호출 순서
===================================================================================================================

===================================================================================================================

